<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        			 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
					http://www.springframework.org/schema/security  http://www.springframework.org/schema/security/spring-security.xsd
       	 			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       	 			http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="false">
						
	<!-- 数据库配置文件位置；Spring3.0以上必须增加ignore-unresolvable="true"否则报错 -->
	<context:property-placeholder location="classpath:datasource.properties" ignore-unresolvable="true"/>  
	
	
	<!-- https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter -->
	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
		<!-- 指定配置装载的目录  -->
		<property name="dir" value="META-INF/druid/wall/oracle" />
		<!-- 是否允许语句中存在注释，Oracle的用户不用担心，Wall能够识别hints和注释的区别 -->
		<property name="commentAllow" value="true" />
	    <!-- 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。 -->
	    <property name="noneBaseStatementAllow" value="true" />
	    <!-- 是否允许一次执行多条语句，缺省关闭 -->
	    <property name="multiStatementAllow" value="true" />
	    <!-- 解除union关键字检查 -->
	    <property name="selectUnionCheck" value="false" />
	</bean>

  	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
  		<property name="dbType" value="mysql" /> 
      	<property name="config" ref="wall-filter-config" />
     	<!-- 对被认为是攻击的SQL进行LOG.error输出 
	    <property name="logViolation" value="false" />-->
	    <!-- 对被认为是攻击的SQL抛出SQLExcepton -->
	    <property name="throwException" value="true" />
    </bean>
    
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">    
        <property name="mergeSql" value="true" />
	</bean>
	  
	<!-- 自定义 druid 日志记录过滤器 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
	    <!-- 所有DataSource相关的日志 -->
		<property name="dataSourceLogEnabled" value="false" />
		<!-- 所有连接相关的日志 -->
		<property name="connectionLogEnabled" value="false" />
		<!-- 所有连接上发生异常的日志 -->
		<property name="connectionLogErrorEnabled" value="true" />
		<!-- 所有Statement相关的日志 -->
		<property name="statementLogEnabled" value="true" />
		<!-- 所有Statement发生异常的日志 -->
		<property name="statementLogErrorEnabled" value="true" />
		<property name="statementParameterSetLogEnabled" value="false" />
		<!-- 输出可执行的SQL -->
		<property name="statementExecutableSqlLogEnable" value="false" />
		
		<property name="statementCreateAfterLogEnabled" value="false" />
		<property name="statementPrepareAfterLogEnabled" value="false" />
		<property name="statementPrepareCallAfterLogEnabled" value="false" />
		<property name="statementExecuteAfterLogEnabled" value="false" />
		<property name="statementExecuteQueryAfterLogEnabled" value="false" />
		<property name="statementExecuteUpdateAfterLogEnabled" value="false" />
		<property name="statementExecuteBatchAfterLogEnabled" value="false" />
		<property name="statementCloseAfterLogEnabled" value="true" />

	  	<property name="connectionConnectBeforeLogEnabled" value="true" />
		<property name="connectionConnectAfterLogEnabled" value="true" />
		<property name="connectionCommitAfterLogEnabled" value="true" />
		<property name="connectionRollbackAfterLogEnabled" value="true" />
		<property name="connectionCloseAfterLogEnabled" value="true" />
	    
	    <property name="resultSetLogEnabled" value="false" />
	    <property name="resultSetLogErrorEnabled" value="true" />
	    <property name="resultSetNextAfterLogEnabled" value="false" />
	    <property name="resultSetOpenAfterLogEnabled" value="false" />
	    <property name="resultSetCloseAfterLogEnabled" value="false" />
	</bean>
	
	
	<!-- druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		
		<!-- 基本属性 url、user、password -->
		
		<!--配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)-->
		<property name="name" value="dataSource-druid" />
		<!--这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName-->
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<!--jdbcUrl: 连接数据库的url -->
		<property name="url" value="${jdbc.url}" />
		<!--username: 连接数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!--password: 连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		 

		<!-- druid 连接池参数 -->
		
		<!--配置初始化大小、最小、最大 -->
		<!--minIdle: 最小空闲连接数量 -->
		<property name="minIdle" value="${druid.minIdle}" /> 
		<!--maxActive: 最大连接池数量 -->
		<property name="maxActive" value="${druid.maxActive}"></property>
		<!--initialSize: 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${druid.initialSize}"></property>
	    
	    <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
	    <property name="maxWait" value="${druid.maxWait}"></property> -->
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒;有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
	    <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"></property>
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒  -->
	    <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"></property>
	     
	    <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 超过时间限制多长，单位是毫秒 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
	    <property name="validationQuery" value="${druid.validationQuery}"></property>
	    <!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性。 -->
	    <property name="testWhileIdle" value="${druid.testWhileIdle}"></property>
	    <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
	    <property name="testOnBorrow" value="${druid.testOnBorrow}"></property>
	    <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
	    <property name="testOnReturn" value="${druid.testOnReturn}"></property>
	     
	    <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
	    <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"></property>
	    <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100--> 
	    <property name="maxOpenPreparedStatements" value="${druid.maxPoolPreparedStatementPerConnectionSize}"></property>
	     
		<!-- Druid的监控统计功能:属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
			#监控统计用的filter:stat
			#日志用的filter:log4j
			#防御SQL注入的filter:wall 
		-->  
		<property name="filters" value="${druid.filters}"></property>
		
		<!--<property name="proxyFilters">
	        <list>
	            <ref bean="wall-filter"/>
	            <ref bean="stat-filter" />
	            <ref bean="log-filter"/>
	        </list>
	    </property>
	     
	--></bean>

	<!-- session工厂  --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation">
			<value>classpath:config/mybatis/mybatis-config.xml</value>
		</property>
		<property name="mapperLocations" value="classpath*:com/firework/**/dao/sqlmap/**/*.xml" />
	</bean>

	<!-- 使用接口扫描代理Dao接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
       <property name="basePackage" value="com.jeefw.**.interfaces" />
    </bean>

</beans>