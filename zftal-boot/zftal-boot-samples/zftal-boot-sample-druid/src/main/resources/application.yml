# 默认的profile为dev，其他环境通过指定启动参数使用不同的profile，比如：
#   测试环境：java -jar my-spring-boot.jar --spring.profiles.active=test
#   生产环境：java -jar my-spring-boot.jar --spring.profiles.active=prod

server:
  port: 8085
management: 
  port: 54002
  health:
    mail:
      enabled: false
info:
  app:
    name: "@project.name@" #从pom.xml中获取
    description: "@project.description@"
    version: "@project.version@"
    spring-boot-version: "@project.parent.version@"

spring: 
  output:
    ansi:
      enabled: always
  messages:
    basename: /i18n/message
  profiles: 
    active: dev
    
  #数据源配置      
  datasource:
      name: zftal_demo
      driver-class-name: oracle.jdbc.driver.OracleDriver
      url: jdbc:oracle:thin:@10.71.19.135:1521:orcl
      username: zftal_api
      password: zftal_api
      type: com.alibaba.druid.pool.DruidDataSource
      # Druid的数据源配置：
      druid: 
        #配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是：”DataSource-” + System.identityHashCode(this)
        #name: DataSource-Test
        #这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName
        #driver-class-name: oracle.jdbc.driver.OracleDriver         
        #url: 
        #username: xxx
        #password: xxx 
        #initialSize: 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时；默认 15
        initial-size: 15
        #连接池最大连接数量 
        max-active: 50
        #获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
        max-wait: 60000
        #连接池最小连接数量；默认 5
        min-idle: 5
        #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒;有两个含义：1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
        time-between-eviction-runs-millis: 60000
        #配置一个连接在池中最小生存的时间，单位：毫秒
        min-evictable-idle-time-millis: 300000
        #超过时间限制是否回收
        remove-abandoned: true
        #超过时间限制多长，单位：毫秒 ，180000毫秒=3分钟
        remove-abandoned-timeout-millis: 180000
        #用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
        validation-query: SELECT 1
        #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性。
        test-while-idle: true
        #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
        test-on-borrow: false
        # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
        test-on-return: false
        #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 
        pool-prepared-statements: true
        #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 
        max-pool-prepared-statement-per-connection-size: 100
        #Druid的监控统计功能:属性类型是字符串，通过别名的方式配置扩展插件
        filters: mergeStat,wall,slf4j
        #Druid监控
        stat:
          enabled: true 
          pointcut-patterns:
          - com.zfsoft.boot.**.web.controller
        dynamic:
          enabled: true 
#日志级别
logging: 
  config: classpath:log4j2.xml
    